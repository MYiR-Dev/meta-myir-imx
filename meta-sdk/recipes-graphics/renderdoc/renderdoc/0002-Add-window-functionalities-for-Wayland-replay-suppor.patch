From ac1eac12aedfce51d6d74985417136f6e4a50015 Mon Sep 17 00:00:00 2001
From: Andrei Catalin Ilie <and96x@gmail.com>
Date: Thu, 26 Sep 2019 13:13:48 +0300
Subject: [PATCH 2/5] Add window functionalities for Wayland replay support

The following features have been added:

	- The window will now get the user given output dimensions;
	- Pressing the F key will maximize the window, pressing it again
	will get the the window back to its normal size;
	- The window can now be moved across the screen;

Due to the lack of wayland client examples, no implementation regarding a
window resize feauture and set a desktop shell for the surface has been
done yet.
---
 renderdoc/api/replay/renderdoc_replay.h |   7 +-
 renderdoc/driver/vulkan/vk_linux.cpp    |   6 +-
 renderdoc/driver/vulkan/vk_replay.h     |   2 +
 renderdoccmd/CMakeLists.txt             |   1 +
 renderdoccmd/renderdoccmd_linux.cpp     | 225 +++++++++++++++++++++++++++++---
 5 files changed, 220 insertions(+), 21 deletions(-)

diff --git a/renderdoc/api/replay/renderdoc_replay.h b/renderdoc/api/replay/renderdoc_replay.h
index d62668c..8b02e30 100644
--- a/renderdoc/api/replay/renderdoc_replay.h
+++ b/renderdoc/api/replay/renderdoc_replay.h
@@ -422,6 +422,8 @@ struct WindowingData
     {
       wl_display *display;
       wl_surface *window;
+      uint32_t *width;
+      uint32_t *height;
     } wayland;
 
     struct
@@ -520,13 +522,16 @@ DOCUMENT(R"(Create a :class:`WindowingData` for an Wayland ``wl_surface`` handle
 :return: A :class:`WindowingData` corresponding to the given window.
 :rtype: WindowingData
 )");
-inline const WindowingData CreateWaylandWindowingData(wl_display *display, wl_surface *window)
+inline const WindowingData CreateWaylandWindowingData(wl_display *display, wl_surface *window,
+                            uint32_t *width, uint32_t *height)
 {
   WindowingData ret = {};
 
   ret.system = WindowingSystem::Wayland;
   ret.wayland.display = display;
   ret.wayland.window = window;
+  ret.wayland.width = width;
+  ret.wayland.height = height;
 
   return ret;
 }
diff --git a/renderdoc/driver/vulkan/vk_linux.cpp b/renderdoc/driver/vulkan/vk_linux.cpp
index 4614a6e..c4491ef 100644
--- a/renderdoc/driver/vulkan/vk_linux.cpp
+++ b/renderdoc/driver/vulkan/vk_linux.cpp
@@ -204,6 +204,8 @@ void VulkanReplay::OutputWindow::SetWindowHandle(WindowingData window)
   {
     wayland.display = window.wayland.display;
     wayland.window = window.wayland.window;
+    wayland.width = window.wayland.width;
+    wayland.height = window.wayland.height;
     return;
   }
 #endif
@@ -316,8 +318,8 @@ void VulkanReplay::GetOutputWindowDimensions(uint64_t id, int32_t &w, int32_t &h
 #if ENABLED(RDOC_WAYLAND)
   if(outw.m_WindowSystem == WindowingSystem::Wayland)
   {
-    w = 1280;
-    h = 720;
+    w = *(outw.wayland.width);
+    h = *(outw.wayland.height);
 
     return;
   }
diff --git a/renderdoc/driver/vulkan/vk_replay.h b/renderdoc/driver/vulkan/vk_replay.h
index 0cbc79f..801ccf5 100644
--- a/renderdoc/driver/vulkan/vk_replay.h
+++ b/renderdoc/driver/vulkan/vk_replay.h
@@ -86,6 +86,8 @@
   {                           \
     wl_display *display;      \
     wl_surface *window;       \
+    uint32_t *width;          \
+    uint32_t *height;         \
   } wayland;
 
 #else
diff --git a/renderdoccmd/CMakeLists.txt b/renderdoccmd/CMakeLists.txt
index 268f9cd..ee8660f 100644
--- a/renderdoccmd/CMakeLists.txt
+++ b/renderdoccmd/CMakeLists.txt
@@ -40,6 +40,7 @@ elseif(UNIX)
 
     if(ENABLE_WAYLAND)
         list(APPEND libraries PRIVATE -lwayland-client)
+        list(APPEND libraries PRIVATE -lwayland-cursor)
     endif()
 
     # Make sure that for the target executable we don't throw away
diff --git a/renderdoccmd/renderdoccmd_linux.cpp b/renderdoccmd/renderdoccmd_linux.cpp
index 53e2c9a..8b092c4 100644
--- a/renderdoccmd/renderdoccmd_linux.cpp
+++ b/renderdoccmd/renderdoccmd_linux.cpp
@@ -40,9 +40,11 @@
 #include <X11/Xlib-xcb.h>
 #elif defined(RENDERDOC_WINDOWING_WAYLAND)
 #include <wayland-client.h>
+#include <wayland-cursor.h>
 #include <fcntl.h>
 #include <sys/mman.h>
 #include <errno.h>
+#include <linux/input.h>
 #endif
 
 #include <replay/renderdoc_replay.h>
@@ -57,9 +59,28 @@
   static struct wl_surface *surface = NULL;
   static struct wl_shell *shell = NULL;
   static struct wl_shell_surface *shell_surface = NULL;
+  static struct wl_seat *seat = NULL;
+
   static struct wl_shm *shm = NULL;
   static struct wl_buffer *buffer = NULL;
   static void *shm_data = NULL;
+
+  static struct wl_keyboard *keyboard = NULL;
+  static struct wl_pointer *pointer = NULL;
+
+  static struct wl_cursor_theme *cursor_theme = NULL;
+  static struct wl_cursor *default_cursor = NULL;
+  static struct wl_surface *cursor_surface =NULL;
+
+  static uint32_t base_width;
+  static uint32_t base_height;
+  static uint32_t fullscreen_width = 1920;
+  static uint32_t fullscreen_height = 1080;
+  uint32_t *global_width;
+  uint32_t *global_height;
+
+  static bool fullscreen = false;
+  static bool esc_pressed = false;
 #endif
 
 void Daemonise()
@@ -217,6 +238,8 @@ void VerifyVulkanLayer(const GlobalEnvironment &env, int argc, char *argv[])
 
 #if defined(RENDERDOC_WINDOWING_WAYLAND)
 
+static void create_window(uint32_t width, uint32_t height);
+
 static void shm_format(void *data, struct wl_shm *wl_shm, uint32_t format)
 {
 }
@@ -225,28 +248,181 @@ static const struct wl_shm_listener shm_listener = {
   shm_format,
 };
 
-static void registry_handler(void *data, struct wl_registry *registry, uint32_t id,
-         const char *interface, uint32_t version)
+static void pointer_handle_enter(void *data, struct wl_pointer *pointer,
+                                  uint32_t serial, struct wl_surface *surface,
+                                  wl_fixed_t sx, wl_fixed_t sy)
 {
-    if (strcmp(interface, "wl_compositor") == 0)
-    {
-      compositor = (wl_compositor *) wl_registry_bind(registry, id,
-                    &wl_compositor_interface, 1);
-    }
-    else if (strcmp(interface, "wl_shell") == 0)
+  struct wl_buffer *buff;
+  struct wl_cursor_image *image;
+
+  image = default_cursor->images[0];
+  buff = wl_cursor_image_get_buffer(image);
+  wl_pointer_set_cursor(pointer, serial, cursor_surface, image->hotspot_x,
+                        image->hotspot_y);
+  wl_surface_attach(cursor_surface, buff, 0, 0);
+  wl_surface_damage(cursor_surface, 0, 0, image->width, image->height);
+  wl_surface_commit(cursor_surface);
+}
+
+static void pointer_handle_leave(void *data, struct wl_pointer *pointer,
+                                  uint32_t serial, struct wl_surface *surface)
+{
+}
+
+static void pointer_handle_motion(void *data, struct wl_pointer *pointer,
+                                  uint32_t time, wl_fixed_t sx, wl_fixed_t sy)
+{
+}
+
+static void pointer_handle_button(void *data, struct wl_pointer *wl_pointer,
+                                  uint32_t serial, uint32_t time,
+                                  uint32_t button, uint32_t state)
+{
+  if (button == BTN_LEFT && state == WL_POINTER_BUTTON_STATE_PRESSED)
+    wl_shell_surface_move(shell_surface, seat, serial);
+}
+
+static void pointer_handle_axis(void *data, struct wl_pointer *wl_pointer,
+                                uint32_t time, uint32_t axis, wl_fixed_t value)
+{
+}
+
+static const struct wl_pointer_listener pointer_listener = {
+  pointer_handle_enter,
+  pointer_handle_leave,
+  pointer_handle_motion,
+  pointer_handle_button,
+  pointer_handle_axis,
+};
+
+static void keyboard_handle_keymap(void *data, struct wl_keyboard *keyboard,
+                                    uint32_t format, int fd, uint32_t size)
+{
+}
+
+static void keyboard_handle_enter(void *data, struct wl_keyboard *keyboard,
+                                  uint32_t serial, struct wl_surface *surface,
+                                  struct wl_array *keys)
+{
+}
+
+static void keyboard_handle_leave(void *data, struct wl_keyboard *keyboard,
+                                  uint32_t serial, struct wl_surface *surface)
+{
+}
+
+static void keyboard_handle_key(void *data, struct wl_keyboard *keyboard,
+                                uint32_t serial, uint32_t time, uint32_t key,
+                                uint32_t state)
+{
+  if (key == KEY_F && state == WL_KEYBOARD_KEY_STATE_PRESSED)
+  {
+    wl_buffer_destroy(buffer);
+    if (fullscreen)
     {
-      shell = (wl_shell *) wl_registry_bind(registry, id, &wl_shell_interface, 1);
+      fullscreen = false;
+      *global_width = base_width;
+      *global_height = base_height;
+      wl_shell_surface_set_transient(shell_surface, surface, 0, 0, 0);
+      create_window(base_width, base_height);
     }
-    else if (strcmp(interface, "wl_shm") == 0)
+    else
     {
-        shm = (wl_shm *) wl_registry_bind(registry, id, &wl_shm_interface, 1);
-        wl_shm_add_listener(shm, &shm_listener, NULL);
+      fullscreen = true;
+      *global_width = fullscreen_width;
+      *global_height = fullscreen_height;
+      wl_shell_surface_set_fullscreen(shell_surface,
+                WL_SHELL_SURFACE_FULLSCREEN_METHOD_DEFAULT,
+                0, NULL);
+      create_window(fullscreen_width, fullscreen_height);
     }
+  }
+  else if (key ==  KEY_ESC && state == WL_KEYBOARD_KEY_STATE_PRESSED)
+  {
+    esc_pressed = true;
+  }
 }
 
-static void registry_remover(void *data, struct wl_registry *registry, uint32_t id)
+static void keyboard_handle_modifiers(void *data, struct wl_keyboard *keyboard,
+                                      uint32_t serial, uint32_t mods_depressed,
+                                      uint32_t mods_latched,
+                                      uint32_t mods_locked, uint32_t group)
+{
+}
+
+static const struct wl_keyboard_listener keyboard_listener = {
+  keyboard_handle_keymap,
+  keyboard_handle_enter,
+  keyboard_handle_leave,
+  keyboard_handle_key,
+  keyboard_handle_modifiers,
+};
+
+static void seat_handle_capabilities(void *data, struct wl_seat *seat,
+                                      uint32_t caps)
+{
+  if (((enum wl_seat_capability) caps & WL_SEAT_CAPABILITY_POINTER)
+      && !pointer)
+  {
+    pointer = wl_seat_get_pointer(seat);
+    wl_pointer_add_listener(pointer, &pointer_listener, NULL);
+  }
+  else if (!((enum wl_seat_capability) caps & WL_SEAT_CAPABILITY_POINTER)
+            && pointer)
+  {
+    wl_pointer_destroy(pointer);
+    pointer = NULL;
+  }
+
+  if (((enum wl_seat_capability) caps & WL_SEAT_CAPABILITY_KEYBOARD)
+      && !keyboard)
+  {
+    keyboard = wl_seat_get_keyboard(seat);
+    wl_keyboard_add_listener(keyboard, &keyboard_listener, NULL);
+  }
+  else if (!((enum wl_seat_capability) caps & WL_SEAT_CAPABILITY_KEYBOARD)
+            && keyboard)
+  {
+    wl_keyboard_destroy(keyboard);
+    keyboard = NULL;
+  }
+}
+
+static const struct wl_seat_listener seat_listener = {
+  seat_handle_capabilities,
+};
+
+static void registry_handler(void *data, struct wl_registry *registry,
+                              uint32_t id, const char *interface,
+                              uint32_t version)
+{
+  if (strcmp(interface, "wl_compositor") == 0)
+  {
+    compositor = (wl_compositor *) wl_registry_bind(registry, id,
+                  &wl_compositor_interface, 1);
+  }
+  else if (strcmp(interface, "wl_shell") == 0)
+  {
+    shell = (wl_shell *) wl_registry_bind(registry, id, &wl_shell_interface, 1);
+  }
+  else if (strcmp(interface, "wl_shm") == 0)
+  {
+    shm = (wl_shm *) wl_registry_bind(registry, id, &wl_shm_interface, 1);
+    wl_shm_add_listener(shm, &shm_listener, NULL);
+
+    cursor_theme = wl_cursor_theme_load(NULL, 32, shm);
+    default_cursor = wl_cursor_theme_get_cursor(cursor_theme, "left_ptr");
+  }
+  else if (strcmp(interface, "wl_seat") == 0)
+  {
+    seat = (wl_seat *) wl_registry_bind(registry, id, &wl_seat_interface, 1);
+    wl_seat_add_listener(seat, &seat_listener, NULL);
+  }
+}
+
+static void registry_remover(void *data, struct wl_registry *registry,
+                              uint32_t id)
 {
-    printf("Got a registry losing event for %d\n", id);
 }
 
 static const struct wl_registry_listener registry_listener = {
@@ -653,7 +829,7 @@ void DisplayRendererPreview(IReplayController *renderer, TextureDisplay &display
   wl_display_dispatch(display);
   wl_display_roundtrip(display);
 
-  if (!compositor || !shell)
+  if (!compositor || !shell || !seat)
   {
     std::cerr << "Could not bind Wayland protocols!" << std::endl;
     return;
@@ -675,10 +851,20 @@ void DisplayRendererPreview(IReplayController *renderer, TextureDisplay &display
 
   wl_shell_surface_set_toplevel(shell_surface);
 
+  base_width = width;
+  base_height = height;
+  global_width = (uint32_t *) malloc(sizeof(uint32_t));
+  global_height = (uint32_t *) malloc(sizeof(uint32_t));
+  *global_width = width;
+  *global_height = height;
+
   create_window(width, height);
 
-  out = renderer->CreateOutput(CreateWaylandWindowingData(display, surface),
-                            ReplayOutputType::Texture);
+  cursor_surface = wl_compositor_create_surface(compositor);
+
+  out = renderer->CreateOutput(CreateWaylandWindowingData(display, surface,
+                  global_width, global_height),
+                  ReplayOutputType::Texture);
 
   out->SetTextureDisplay(displayCfg);
 
@@ -696,9 +882,12 @@ void DisplayRendererPreview(IReplayController *renderer, TextureDisplay &display
 
     loopCount++;
 
-    if(numLoops > 0 && loopCount == numLoops)
+    if((numLoops > 0 && loopCount == numLoops) || esc_pressed)
       break;
   }
+
+  free(global_width);
+  free(global_height);
 #else
   std::cerr << "No supporting windowing systems defined at build time (xlib and xcb)" << std::endl;
 #endif
-- 
2.7.4

